package main

import (
	"testing"

	"github.com/ethereum/go-ethereum/rlp"
	"github.com/onrik/gomerkle"
	"github.com/stretchr/testify/require"
)

func TestVerifyMerkleProof(t *testing.T) {
	eTag := "value24"
	root := "dfcd789699a525b1a3db24fb06f6ecc2c9b3456f9448b93bb8261e87911ff8db"
	proof, err := proofFromJSON([]byte(`[
		{"left": "cd0bf7431f3f672fe0320a82b1c8e6cd0dd1a4ae814a8093ae51381182fb407c"},
		{"left": "6d234c28f30d0e766121233254f58a2e17096c4e9fee805dd259cc71105db56e"},
		{"left": "6dc649649acc0465c9988df2fbc90094018105518de04708cf1cb352d456bcf0"},
		{"right": "7faf5e7c696aaef7c111ad8fc6d19f802848613fb6e5f32c10abcc88a0da4dfb"},
		{"left": "ae4acd127510c3bd6f1d7d19165fdbacc89c80ab19238f415076673dbe3a3afb"},
		{"right": "e12b1b12bb9cd483f2ac4d5f5957a9de11309675cf4883679bffc99e86000b34"}
	]`))

	// Test invalid root
	err = verifyMerkleProof(proof, root[:1], eTag)
	require.NotNil(t, err)

	// Test invalid value
	err = verifyMerkleProof(proof, root, "111")
	require.NotNil(t, err)

	// Test valid
	err = verifyMerkleProof(proof, root, eTag)
	require.Nil(t, err)
}

func TestProofFromJSON(t *testing.T) {
	data := `[
		{"left": "422d7d7b81b04fbbba90c3850d70f67c"},
		{"right": "b21bb071514d40c293468ed8ee85f2c1"},
		{"right": "6b0db1bc852c4b8ea758fd8efd8c9c92"},
		{"left": "bc11e2538b144f389da7908fd6ca2be3"}
	]`

	expected := gomerkle.Proof{
		map[string][]byte{
			"left": []byte{0x42, 0x2d, 0x7d, 0x7b, 0x81, 0xb0, 0x4f, 0xbb, 0xba, 0x90, 0xc3, 0x85, 0xd, 0x70, 0xf6, 0x7c},
		},
		map[string][]byte{
			"right": []byte{0xb2, 0x1b, 0xb0, 0x71, 0x51, 0x4d, 0x40, 0xc2, 0x93, 0x46, 0x8e, 0xd8, 0xee, 0x85, 0xf2, 0xc1},
		},
		map[string][]byte{
			"right": []byte{0x6b, 0xd, 0xb1, 0xbc, 0x85, 0x2c, 0x4b, 0x8e, 0xa7, 0x58, 0xfd, 0x8e, 0xfd, 0x8c, 0x9c, 0x92},
		},
		map[string][]byte{
			"left": []byte{0xbc, 0x11, 0xe2, 0x53, 0x8b, 0x14, 0x4f, 0x38, 0x9d, 0xa7, 0x90, 0x8f, 0xd6, 0xca, 0x2b, 0xe3},
		},
	}

	// Test invalid proof format
	proof, err := proofFromJSON([]byte(`["test"]`))
	require.NotNil(t, err)

	// Test valid
	proof, err = proofFromJSON([]byte(data))
	require.Nil(t, err)
	require.Equal(t, expected, proof)
}

func TestVerifyPatriciaTrieProof(t *testing.T) {
	cert := "ad3bf011bf0d41df30978d5cd86ab449c7e464dca7d8d858c1360b0774eb6fd9"
	eTag := "e533f48ca14a82c7e9bb0479f7fb6871"
	root := "fa163df00c0747cf88e8c38645b5a483f675f82bc290a33cf41d42940744b970"
	proof, err := patriciaTrieProofFromJSON([]byte(`[
		"f90151a03aa6e5dfe1003264c7eeac77cff22cd5b40e3130725eef4a7245b32c91633140808080a02068aedbcda2868169bbfa7d6cbe27273da43ef79550c61a707eddac223f9fa7a0214fea86ee51ab485497f2a2eab7367cd9101af62dc18e5ac0ce02ebe182be5880a02949c6a67a103ecda5fd1171ef873563b0892056d996baa0fcf51aba2a91803f80a01c472d0552135ef17a788d1af2e9d8c8c72e7131bb85e5cc632ea6a7e8de321da04dc342e18b77bc2594b6d80de0e2a96588702f1ed03bb7c0ae00042387cd1abb80a075380dd09ff9e1cf174bb23bafcc1b543a7be2eac0812805965c87cf35c86ab7a044ced91835232d41a5d342065679b273d414ccd78117d72fa1ddfefbf8f4cca2a0f1d5db12dfe115d00f7943443511ce6c0f5cf85d781f422149ea7414a5929be4a0b7644f46a6988692d0e99adb3b8013df1c9b1e5223dade6580fd294335664a9680",
		"f842a03d3bf011bf0d41df30978d5cd86ab449c7e464dca7d8d858c1360b0774eb6fd9a06535333366343863613134613832633765396262303437396637666236383731"
	]`))
	require.Nil(t, err)

	// Test invalid root
	err = verifyPatriciaTrieProof(proof, "111", cert, eTag)
	require.NotNil(t, err)

	// Test invalid cert
	err = verifyPatriciaTrieProof(proof, root, "sdf98sdhfsdhfiu", eTag)
	require.NotNil(t, err)

	// Test invalid eTag
	err = verifyPatriciaTrieProof(proof, root, cert, "dsjf8sd976fsdf")
	require.NotNil(t, err)

	// Test valid
	err = verifyPatriciaTrieProof(proof, root, cert, eTag)
	require.Nil(t, err)
}

func TestPatriciaTrieProofFromJSON(t *testing.T) {
	data := `[
		"f90151a03aa6e5dfe1003264c7eeac77cff22cd5b40e3130725eef4a7245b32c91633140808080a02068aedbcda2868169bbfa7d6cbe27273da43ef79550c61a707eddac223f9fa7a0214fea86ee51ab485497f2a2eab7367cd9101af62dc18e5ac0ce02ebe182be5880a02949c6a67a103ecda5fd1171ef873563b0892056d996baa0fcf51aba2a91803f80a01c472d0552135ef17a788d1af2e9d8c8c72e7131bb85e5cc632ea6a7e8de321da04dc342e18b77bc2594b6d80de0e2a96588702f1ed03bb7c0ae00042387cd1abb80a075380dd09ff9e1cf174bb23bafcc1b543a7be2eac0812805965c87cf35c86ab7a044ced91835232d41a5d342065679b273d414ccd78117d72fa1ddfefbf8f4cca2a0f1d5db12dfe115d00f7943443511ce6c0f5cf85d781f422149ea7414a5929be4a0b7644f46a6988692d0e99adb3b8013df1c9b1e5223dade6580fd294335664a9680",
		"f842a03d3bf011bf0d41df30978d5cd86ab449c7e464dca7d8d858c1360b0774eb6fd9a06535333366343863613134613832633765396262303437396637666236383731"
	]`

	expected := []rlp.RawValue{
		[]byte{0xf9, 0x1, 0x51, 0xa0, 0x3a, 0xa6, 0xe5, 0xdf, 0xe1, 0x0, 0x32, 0x64, 0xc7, 0xee, 0xac, 0x77, 0xcf, 0xf2, 0x2c, 0xd5, 0xb4, 0xe, 0x31, 0x30, 0x72, 0x5e, 0xef, 0x4a, 0x72, 0x45, 0xb3, 0x2c, 0x91, 0x63, 0x31, 0x40, 0x80, 0x80, 0x80, 0xa0, 0x20, 0x68, 0xae, 0xdb, 0xcd, 0xa2, 0x86, 0x81, 0x69, 0xbb, 0xfa, 0x7d, 0x6c, 0xbe, 0x27, 0x27, 0x3d, 0xa4, 0x3e, 0xf7, 0x95, 0x50, 0xc6, 0x1a, 0x70, 0x7e, 0xdd, 0xac, 0x22, 0x3f, 0x9f, 0xa7, 0xa0, 0x21, 0x4f, 0xea, 0x86, 0xee, 0x51, 0xab, 0x48, 0x54, 0x97, 0xf2, 0xa2, 0xea, 0xb7, 0x36, 0x7c, 0xd9, 0x10, 0x1a, 0xf6, 0x2d, 0xc1, 0x8e, 0x5a, 0xc0, 0xce, 0x2, 0xeb, 0xe1, 0x82, 0xbe, 0x58, 0x80, 0xa0, 0x29, 0x49, 0xc6, 0xa6, 0x7a, 0x10, 0x3e, 0xcd, 0xa5, 0xfd, 0x11, 0x71, 0xef, 0x87, 0x35, 0x63, 0xb0, 0x89, 0x20, 0x56, 0xd9, 0x96, 0xba, 0xa0, 0xfc, 0xf5, 0x1a, 0xba, 0x2a, 0x91, 0x80, 0x3f, 0x80, 0xa0, 0x1c, 0x47, 0x2d, 0x5, 0x52, 0x13, 0x5e, 0xf1, 0x7a, 0x78, 0x8d, 0x1a, 0xf2, 0xe9, 0xd8, 0xc8, 0xc7, 0x2e, 0x71, 0x31, 0xbb, 0x85, 0xe5, 0xcc, 0x63, 0x2e, 0xa6, 0xa7, 0xe8, 0xde, 0x32, 0x1d, 0xa0, 0x4d, 0xc3, 0x42, 0xe1, 0x8b, 0x77, 0xbc, 0x25, 0x94, 0xb6, 0xd8, 0xd, 0xe0, 0xe2, 0xa9, 0x65, 0x88, 0x70, 0x2f, 0x1e, 0xd0, 0x3b, 0xb7, 0xc0, 0xae, 0x0, 0x4, 0x23, 0x87, 0xcd, 0x1a, 0xbb, 0x80, 0xa0, 0x75, 0x38, 0xd, 0xd0, 0x9f, 0xf9, 0xe1, 0xcf, 0x17, 0x4b, 0xb2, 0x3b, 0xaf, 0xcc, 0x1b, 0x54, 0x3a, 0x7b, 0xe2, 0xea, 0xc0, 0x81, 0x28, 0x5, 0x96, 0x5c, 0x87, 0xcf, 0x35, 0xc8, 0x6a, 0xb7, 0xa0, 0x44, 0xce, 0xd9, 0x18, 0x35, 0x23, 0x2d, 0x41, 0xa5, 0xd3, 0x42, 0x6, 0x56, 0x79, 0xb2, 0x73, 0xd4, 0x14, 0xcc, 0xd7, 0x81, 0x17, 0xd7, 0x2f, 0xa1, 0xdd, 0xfe, 0xfb, 0xf8, 0xf4, 0xcc, 0xa2, 0xa0, 0xf1, 0xd5, 0xdb, 0x12, 0xdf, 0xe1, 0x15, 0xd0, 0xf, 0x79, 0x43, 0x44, 0x35, 0x11, 0xce, 0x6c, 0xf, 0x5c, 0xf8, 0x5d, 0x78, 0x1f, 0x42, 0x21, 0x49, 0xea, 0x74, 0x14, 0xa5, 0x92, 0x9b, 0xe4, 0xa0, 0xb7, 0x64, 0x4f, 0x46, 0xa6, 0x98, 0x86, 0x92, 0xd0, 0xe9, 0x9a, 0xdb, 0x3b, 0x80, 0x13, 0xdf, 0x1c, 0x9b, 0x1e, 0x52, 0x23, 0xda, 0xde, 0x65, 0x80, 0xfd, 0x29, 0x43, 0x35, 0x66, 0x4a, 0x96, 0x80},
		[]byte{0xf8, 0x42, 0xa0, 0x3d, 0x3b, 0xf0, 0x11, 0xbf, 0xd, 0x41, 0xdf, 0x30, 0x97, 0x8d, 0x5c, 0xd8, 0x6a, 0xb4, 0x49, 0xc7, 0xe4, 0x64, 0xdc, 0xa7, 0xd8, 0xd8, 0x58, 0xc1, 0x36, 0xb, 0x7, 0x74, 0xeb, 0x6f, 0xd9, 0xa0, 0x65, 0x35, 0x33, 0x33, 0x66, 0x34, 0x38, 0x63, 0x61, 0x31, 0x34, 0x61, 0x38, 0x32, 0x63, 0x37, 0x65, 0x39, 0x62, 0x62, 0x30, 0x34, 0x37, 0x39, 0x66, 0x37, 0x66, 0x62, 0x36, 0x38, 0x37, 0x31},
	}

	// Test invalid proof format
	proof, err := patriciaTrieProofFromJSON([]byte(`[{"foo": "bar"}]`))
	require.NotNil(t, err)

	// Test valid
	proof, err = patriciaTrieProofFromJSON([]byte(data))
	require.Nil(t, err)
	require.Equal(t, expected, proof)
}
